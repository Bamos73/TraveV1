import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class DetailsScreen extends StatefulWidget {
  static const routeName = '/details';

  final String productId; // l'identifiant unique du produit
  final DocumentSnapshot<Map<String, dynamic>>? product; // les informations du produit

  const DetailsScreen({
    Key? key,
    required this.productId,
    this.product,
  }) : super(key: key);

  factory DetailsScreen.fromProductId(String productId) {
    return DetailsScreen(
      productId: productId,
      product: null as DocumentSnapshot<Map<String, dynamic>>, // Remarque : il faut initialiser le document snapshot à une valeur null car on ne peut pas le récupérer avec seulement l'ID.
    );
  }

  @override
  _DetailsScreenState createState() => _DetailsScreenState();
}

class _DetailsScreenState extends State<DetailsScreen> {
  late Future<DocumentSnapshot<Map<String, dynamic>>> _productDocFuture;

  @override
  void initState() {
    super.initState();
    _productDocFuture = _getProductData(widget.productId);
  }

  Future<DocumentSnapshot<Map<String, dynamic>>> _getProductData(String productId) async {
    try{
      DocumentSnapshot<Map<String, dynamic>> product = await FirebaseFirestore.instance
          .collection('Home_NewCollection_product')
          .doc(productId)
          .get();
      return product;
    } catch (e) {
      print(e.toString());
      rethrow;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: FutureBuilder<DocumentSnapshot<Map<String, dynamic>>>(
        future: _productDocFuture,
        builder: (context, snapshot) {
          if (snapshot.hasError || snapshot.data == null) {
            return Center(child: Text('Erreur de chargement des données du produit.'));
          } else if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else {
            final product = snapshot.data!;
            return Column(
              children: [
                // Affichez ici l'image et le titre du produit
                Image.network(
                  product['images'][0], // Utilisez l'URL de l'image du produit
                  height: 200,
                  width: 200,
                ),
                SizedBox(height: 16),
                Text(
                  product['title'], // Utilisez le titre du produit
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            );
          }
        },
      ),
    );
  }
}

class ProductDetailsArguments {
  final String productId; // nouveau paramètre ajouté
  final DocumentSnapshot<Map<String, dynamic>>? product;

  ProductDetailsArguments({
    required this.productId,
    required this.product,
  });
}